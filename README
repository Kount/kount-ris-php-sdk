Kount RIS PHP SDK version Sdk-Ris-Php-0642-201704071144
================================
BUILD DATE: 04/07/2017

ARTIFACTS
---------
This deployment package includes the following artifacts:
  Sdk-Ris-Php-0642-201704071144.zip
  `-- sdkphp/
      |-- phpdocs/                  : Directory containing HTML code documentation.
      |-- src/                      : Directory containing source code.
      |-- tests/                    : Directory containing integration and unit tests for the sdk.
      |-- CHANGELOG                 : Plain text file containing a log detailing changes
                                      between versions of the SDK.
      |-- README                    : This plain text file.
      |-- composer.json             : File containing dependencies which can be installed with 'composer install'.
      |-- phpunit.xml               : Configuration file for running tests.
      |-- phpunit.integration.xml   : Configuration file for running integration tests specifically.
      |-- phpunit.dist.xml          : Configuration file for running phpDocumentor and generating documentation.
      |-- release.sh                : Bash script for producing release versions and .zip archive(temporary solution, will opt to automate process in next releases.)

ENVIRONMENT
-----------
PHP version 5.5.0 or later is recommended.

CLASS AUTOLOADER
----------------
This SDK provides an `spl_autoload_register()` compatible class loader which
reduces the need for fragile relative path based `require` directives within
the SDK itself. This autoloader is enabled by including the src/autoload.php
script in your code.

    <?php
      require_once '/path/to/sdk/src/autoload.php';
    ?>

CONFIGURATION
-------------
The file settings.ini contains basic configuration for the Kount RIS PHP SDK.
Please make sure to set all the values appropriately before attempting to make
a RIS request. The file is located in the zip SDK package hierarchy at the
following path:
  Sdk-Ris-Php-0642-201704071144.zip
  `-- sdkphp/
      `-- src/
          `-- settings.ini

CUSTOM CONFIGURATION
--------------------
If for some reason the default settings.ini based configuration will not work
in your environment you can override the default behavior in several ways.

 1. Custom Ini Location
    The full path to the settings.ini file can be changed by defining
    'KOUNT_SETTINGS_FILE' before any Kount classes are loaded.

    <?php
      define('KOUNT_SETTINGS_FILE', '/full/path/to/settings.ini');
      require_once '/path/to/sdk/autoload.php';

      $request = new Kount_Ris_Request_Inquiry();
      $request->...;
    ?>

 2. Custom Kount_Ris_Settings Instance
    Settings can be provided from a completely different source by creating a
    custom class which implements the Kount_Ris_Settings interface. The
    default settings object is an instance of Kount_Ris_ArraySettings which may
    be used as a reference or parent class for a custom implementation.

    <?php
      require_once '/path/to/sdk/autoload.php';

      $mySettings = new MyCompany_RisSettings();

      $request = new Kount_Ris_Request_Inquiry($mySettings);
      $request->...;
    ?>

PAYMENT TOKEN HASHING
---------------------
As of SDK version 5.0.0 all payment tokens are hashed (one-way encryption) prior
to being transmitted to Kount. Hence, no credit card numbers, Paypal payment
IDs, Check numbers, Google Checkout IDs, Bill Me Later IDs, Green Dot MoneyPak
IDs, or gift card numbers are transmitted in plain text. A new RIS input field,
LAST4, has been introduced. This is required to be set when the payment type is
credit card and is optional for all other payment types. The value of this
field is the last 4 numbers/characters of the payment token. The SDK 
automatically sets this value prior to hashing the payment token for all
payment types.

LOGGING
-------
The Kount RIS PHP SDK includes a basic logging framework abstraction. This
allows your logging framework to be integrated with the SDK. By default the
SDK provides two basic loggers: NOP and SIMPLE. NOP is a logger that silently
discards all logging. This is the default logger the SDK uses. SIMPLE is a
logger that logs messages to a file that you specify on the machine the SDK is
hosted on. SIMPLE logger can be configured in settings.ini. The following
logging levels are available in order of decreasing severity: FATAL, ERROR,
WARN, INFO, and DEBUG.

CUSTOM LOGGER INTEGRATION
-------------------------
This is the recommended way to integrate a custom logger with the SDK. For the
purpose of clarity suppose your logger is called "loggerX":
1. Create the class YourCompany_LoggerXFactory that implements
   Kount_Log_Factory_LoggerFactory.
2. Create YourCompany_LoggerX class that implements
   Kount_Log_Binding_Logger. This class will be the facade to your custom
   loggerX.
3. Set your logger factory using the method
   Kount_Log_Factory_LogFactory::setLoggerFactory().

CONVERVTING PKCS#12 CERTIFICATES TO PEM FORMAT
----------------------------------------------
The SDK can not directly use PKCS#12 X.509 certificates. The recommended format
is .pem. The OpenSSL (http://www.openssl.org/) utility can be used to convert a
PKCS#12 certificate (of which common extensions are .p12 and .pfx) to .pem.
Here is an example Linux terminal command to convert a PKCS#12 certificate to a
.pem certificate:

    `openssl pkcs12 -clcerts -nokeys -in ENTER_PKCS#12_CERT_HERE -out cert.pem`

Here is an example Linux terminal command to convert a PKCS#12 certificate to
a .pem private key file:

    `openssl pkcs12 -nocerts -in ENTER_PKCS#12_CERT_HERE -out key.pem`

Hence, supposing the first command is executed in a directory containing a
PKCS#12 file called my-ris-certificate.p12, the command you would enter is:

    `openssl pkcs12 -clcerts -nokeys -in my-ris-certificate.p12 -out cert.pem`

This will create a .pem certificate called cert.pem. To view the information
contained in the certificate including the serial number, issuer and
expiration date, execute the following command:

    `openssl x509 -in cert.pem -inform PEM -text -noout`

The OpenSSL utility is also available on other platforms including Windows.

KNOWN ISSUES
------------
The SDK uses cURL (http://curl.haxx.se) to post data to RIS. On some platforms,
notably versions of Fedora Linux, cURL is bundled with NSS (Network Security 
Services, http://www.mozilla.org/projects/security/pki/nss/) which provides SSL
support. Under certain circumstances when a RIS post is attempted an error
occurs which is characterized by messages similar to "Unable to load client key
-8178". This appears to be due to NSS being unable to process X.509
RIS certificates created using OpenSSL (http://www.openssl.org/). One possible
resolution to this is to recompile cURL on the host platform with a compatible
version of OpenSSL as opposed to NSS. Other resolutions may also be possible.

COPYRIGHT AND LICENCE
---------------------
Copyright (C) 2012 Kount, Inc. All Rights Reserved.
